/* soapClient.cpp
   Generated by gSOAP 2.8.11 from remcuda.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.11 2013-12-12 06:49:41 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__sum(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct _rcArray v1, struct _rcArray v2, struct _rcArray *result)
{	struct ns__sum soap_tmp_ns__sum;
	struct ns__sumResponse *soap_tmp_ns__sumResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:161952";
	soap->encodingStyle = NULL;
	soap_tmp_ns__sum.v1 = v1;
	soap_tmp_ns__sum.v2 = v2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__sum(soap, &soap_tmp_ns__sum);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__sum(soap, &soap_tmp_ns__sum, "ns:sum", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__sum(soap, &soap_tmp_ns__sum, "ns:sum", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default__rcArray(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__sumResponse = soap_get_ns__sumResponse(soap, NULL, "ns:sumResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__sumResponse->result)
		*result = *soap_tmp_ns__sumResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__InnerProduct(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct _rcArray v1, struct _rcArray v2, float *result)
{	struct ns__InnerProduct soap_tmp_ns__InnerProduct;
	struct ns__InnerProductResponse *soap_tmp_ns__InnerProductResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://127.0.0.1:161952";
	soap->encodingStyle = NULL;
	soap_tmp_ns__InnerProduct.v1 = v1;
	soap_tmp_ns__InnerProduct.v2 = v2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns__InnerProduct(soap, &soap_tmp_ns__InnerProduct);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__InnerProduct(soap, &soap_tmp_ns__InnerProduct, "ns:InnerProduct", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__InnerProduct(soap, &soap_tmp_ns__InnerProduct, "ns:InnerProduct", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_float(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns__InnerProductResponse = soap_get_ns__InnerProductResponse(soap, NULL, "ns:InnerProductResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ns__InnerProductResponse->result)
		*result = *soap_tmp_ns__InnerProductResponse->result;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
